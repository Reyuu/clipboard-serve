# This is a basic workflow to help you get started with Actions

name: Building

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master ]
    tags:
      - 'v*'

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build-windows:
    # The type of runner that the job will run on
    runs-on: windows-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    
    - name: Set sha_short
      id: vars
      run: echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"
    
    - name: Check sha_short
      run: echo ${{ steps.vars.outputs.sha_short }}
    
    - name: Install cx_Freeze
      run: pip install cx_Freeze
      
    - name: Check if cx_freeze is installed
      run: |
        python -c "import cx_Freeze"
        $status = $?
        $not_status = !$?
        echo $status
    
    - name: Checkout code
      uses: actions/checkout@v2

    # Runs a single command using the runners shell
    - name: Install depedencies
      run: pip install -r requirements.txt
        
    # Runs a set of commands using the runners shell
    - name: Build source
      run: python setup.py build
    
    - name: List directories
      run: |
        dir
        dir build
        dir build\exe.win-amd64-3.8
    
    - name: Zip Release
      run: python -c "import shutil;shutil.make_archive('clipboard-serve.${{ steps.vars.outputs.sha_short }}', 'zip', './build/exe.win-amd64-3.8', '.')"

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.vars.outputs.sha_short }}
        release_name: Release ${{ steps.vars.outputs.sha_short }}
        body: |
          This is an automated release for `${{ steps.vars.outputs.sha_short }}`.
        draft: false
        prerelease: false

    - name: List directories
      run: |
        dir
        dir build
        dir build\exe.win-amd64-3.8
        
    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./clipboard-serve.${{ steps.vars.outputs.sha_short }}.zip
        asset_name: clipboard-serve.${{ steps.vars.outputs.sha_short }}.zip
        asset_content_type: application/zip
